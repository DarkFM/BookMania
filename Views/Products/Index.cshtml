@using System.Globalization;

@model CatalogViewModel

@{
    ViewData["Title"] = "Products";
}

<section class="container">
    <header class="page-heading">
        all products
    </header>
    <form class="product-list">
        <header class="paging">
            <span class="paging__count">@Model.TotalItemsFound Book(s) Found</span>
            <span class="paging__pageIndex">
                <input class="paging__pageIndex-input" type="text" name="page" value="@Model.CurrentPage" />
                of @Model.TotalPages
            </span>
            <span class="paging__sort">Sort <i class="fas fa-chevron-down"></i></span>
        </header>
        <div class="product-list__content">
            <section class="left-panel">
                <div class="accordion">
                    <input id="panel-1" class="accordion__check" type="checkbox" hidden />
                    <label for="panel-1" class="accordion__trigger">
                        <span class="accordion__title">Categories</span>
                        <i class="fas fa-chevron-down icon"></i>
                    </label>
                    <div class="accordion__content">
                        <label class="filter-option">
                            @if (Model.Categories.Any(c => c.IsSelected))
                            {
                                <input type="checkbox" name="c" />
                            }
                            else
                            {
                                <input type="checkbox" checked disabled name="c" />
                            }
                            <span>All</span>
                        </label>
                        @foreach (var category in Model.Categories)
                        {
                            <label class="filter-option">
                                <input checked="@category.IsSelected" type="checkbox" name="c" value="@category.Id" />
                                <span>@category.Name</span>
                            </label>
                        }
                        <div class="show-more" data-hidden-display="Show Less" data-full-height="0">Show More</div>
                    </div>
                </div>
                <div class="accordion">
                    <input id="panel-2" class="accordion__check" type="checkbox" hidden />
                    <label for="panel-2" class="accordion__trigger">
                        <span class="accordion__title">Authors</span>
                        <i class="fas fa-chevron-down icon"></i>
                    </label>
                    <div class="accordion__content">
                        <label class="filter-option">
                            @if (Model.Authors.Any(a => a.IsSelected))
                            {
                                <input type="checkbox" name="a" />
                            }
                            else
                            {
                                <input type="checkbox" checked disabled name="a" />
                            }
                            <span>All</span>
                        </label>
                            @foreach (var author in Model.Authors)
                            {
                                <label class="filter-option">
                                    <input checked="@author.IsSelected" type="checkbox" name="a" value="@author.Id" />
                                    <span>@author.Name</span>
                                </label>
                            }
                        <div class="show-more" data-hidden-display="Show Less" data-full-height="0">Show More</div>
                    </div>
                </div>
                <div class="accordion">
                    <input id="panel-3" class="accordion__check" type="checkbox" hidden />
                    <label for="panel-3" class="accordion__trigger">
                        <span class="accordion__title">Publishers</span>
                        <i class="fas fa-chevron-down icon"></i>
                    </label>
                    <div class="accordion__content">
                        <label class="filter-option">
                            @if (Model.Publishers.Any(p => p.IsSelected))
                            {
                                <input type="checkbox" name="p" />
                            }
                            else
                            {
                                <input type="checkbox" checked disabled name="p" />
                            }
                            <span>All</span>
                        </label>
                        @foreach (var publisher in Model.Publishers)
                        {
                            <label class="filter-option">
                                <input checked="@publisher.IsSelected" type="checkbox" name="p" value="@publisher.Id" />
                                <span>@publisher.Name</span>
                            </label>
                        }
                        <div class="show-more" data-hidden-display="Show Less" data-full-height="0">Show More</div>
                    </div>
                </div>
                <input type="submit" hidden />
                <button type="button" class="btn btn--flat apply-filters">Apply Filters</button>
                <button type="button" class="btn btn--flat-danger reset-filters">Reset Filters</button>
            </section>
            <section class="right-panel">
                <div class="product-list__main">
                    @foreach (var book in Model.BookItems)
                    {
                        <div class="product">
                            <div class="product__img">
                                <img src="@book.Thumbnail" alt="Alternate Text" />
                            </div>
                            <div class="product__icons">
                                <div class="product__ratings" title="@(book.AverageRating == null ? "Not Rated" : book.AverageRating.ToString()+"/5")">
                                    <div class="star star-1"></div>
                                    <div class="star star-2"></div>
                                    <div class="star star-3"></div>
                                    <div class="star star-4"></div>
                                    <div class="star star-5"></div>
                                </div>
                                <div class="product__favorite">
                                    <img class="@(book.IsFavorite ? "isFavorite": "")" src="~/images/heart-regular.svg" />
                                </div>

                            </div>

                            <div class="product__info">
                                @{
                                    string bookAuthors = string.Join(", ", book.Authors);
                                    bookAuthors = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(bookAuthors);
                                }
                                <h3 class="product__title" title="@book.Title">@book.Title</h3>
                                <h5 class="product__author" title="@bookAuthors">@bookAuthors</h5>
                            </div>
                            <div class="product__pricing">
                                <span class="product__price">@book.Price.ToString("C")</span>
                                <a asp-action="Item" asp-route-id="@book.BookId" class="btn btn--secondary">Select</a>
                            </div>
                        </div>
                    }
                </div>
                <footer class="product-list__footer">
                    @{ 
                        int prevPage = (Model.CurrentPage - 1);

                        int prevPageNumber = prevPage > Model.TotalPages ? Model.TotalPages : prevPage;
                        int nextPageNumber = Model.CurrentPage + 1;
                    }
                    @if (Model.HasPrevPage)
                    {
                        <a class="btn btn--secondary" 
                           asp-route-page="@prevPageNumber" 
                           asp-route-c="@ViewBag.Categories"
                           asp-route-a="@ViewBag.Authors"
                           asp-route-p="@ViewBag.Publisher">Prev</a>
                    }
                    else
                    {
                        <a class="btn btn--disabled">Prev</a>
                    }

                    @if (Model.HasNextPage)
                    {
                        <a class="btn btn--secondary"
                           asp-route-page="@nextPageNumber" 
                           asp-route-c="@ViewBag.Categories"
                           asp-route-a="@ViewBag.Authors"
                           asp-route-p="@ViewBag.Publisher">Next</a>
                    }
                    else
                    {
                        <a class="btn btn--disabled">Next</a>
                    }
                </footer>
            </section>
        </div>

    </form>
</section>

@section Scripts {
    <script>
        // if top checkbox is checked, uncheck all its siblings


        /**
         * Handles the change event for the "All' checkbox.
         * @@param {Event} ev The event object.
         */
        function topCheckboxEventHandler(ev) {
            const { target } = ev;
            const siblingCheckboxes = target
                .closest(".accordion__content")
                .querySelectorAll('.filter-option:nth-child(n+2) > input[type="checkbox"]');

            if (target.checked) {
                target.disabled = true;
                siblingCheckboxes.forEach(x => x.checked = false)
            }
        }

        /**
         * Handles the change event for all sibling checkboxes.
         * @@param { Event } ev The event object.
         */
        function siblingCheckboxEventHandler(ev) {
            const { target } = ev;
            const parentContainer = target.closest(".accordion__content");
            const topCheckbox = parentContainer
                .querySelector('.filter-option:first-of-type > input[type="checkbox"]');
            const siblings = parentContainer
                .querySelectorAll('.filter-option:nth-child(n+2) > input[type="checkbox"]');

            if (!Array.from(siblings).some(el => el.checked)) {
                topCheckbox.checked = true;
                topCheckbox.disabled = true;
            }

            if (target.checked) {
                topCheckbox.checked = false;
                topCheckbox.disabled = false;
            }
        }

        /**
         * Handles click events on the show more button on an accordion
         * @@param { Event } ev The raised event
         */
        function expandAccordion(ev) {
            const { target } = ev;
            const parent = target.parentNode;

            if (!target.classList.contains('show-more'))
                return;
            // swap the display texts
            const currentDisplayText = target.innerText;
            const textToDisplay = target.dataset.hiddenDisplay;
            target.innerText = textToDisplay;
            target.dataset.hiddenDisplay = currentDisplayText;

            const isParentExpanded = Boolean(+target.dataset.fullHeight);
            if (isParentExpanded == false) {
                target.setAttribute('style', 'position: relative');
                parent.setAttribute('style', "height: 400px; overflow: scroll;")
                target.dataset.fullHeight = 1;
            } else {
                parent.scrollTop = 0;
                target.setAttribute('style', '');
                parent.setAttribute('style', '')
                target.dataset.fullHeight = 0;
            }
        }

        /**
         * This funciton resets all filters applied to the page
         * @@param { Event } ev The event object
         */
        function resetAllFilters(ev) {
            topCheckBoxes.forEach(x => (x.checked = true, x.disabled = true));
            siblingCheckboxes.forEach(x => x.checked = false);
        }

        /**
         * Resets the current page to 1
         * @@param { Event } ev The raised event
         */
        function resetPageIndex(ev) {
            document.querySelector('.paging__pageIndex-input').value = 1;
            document.querySelector('form.product-list').submit();
        }

        const topCheckBoxes = document.querySelectorAll('.filter-option:first-of-type > input[type="checkbox"]');
        const siblingCheckboxes = document.querySelectorAll('.filter-option:nth-child(n+2) > input[type="checkbox"]');

        document.querySelector('.left-panel').addEventListener('click', expandAccordion);
        topCheckBoxes.forEach(x => x.addEventListener('change', topCheckboxEventHandler));
        siblingCheckboxes.forEach(x => x.addEventListener('change', siblingCheckboxEventHandler));
        document.querySelector('.reset-filters').addEventListener('click', resetAllFilters);
        document.querySelector('.apply-filters').onclick = resetPageIndex;//addEventListener('click', resetPageIndex)
    </script>
}